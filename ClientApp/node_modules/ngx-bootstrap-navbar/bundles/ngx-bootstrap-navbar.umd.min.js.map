{"version":3,"sources":["ng://ngx-bootstrap-navbar/lib/navbar-dynamic-collapse.directive.ts","ng://ngx-bootstrap-navbar/lib/navbar-animation.ts","ng://ngx-bootstrap-navbar/lib/navbar-collapse.component.ts","ng://ngx-bootstrap-navbar/lib/navbar.module.ts"],"names":["NgxNavbarDynamicExpandDirective","_viewportRuler","_elRef","_ngZone","_cdRef","_this","this","_isExpanded","_onDestroy","Subject","_update","isExpanded$","merge","change","pipe","filter","checkBootstrapStylesAreLoaded","nativeElement","map","overflowSize","element","isExpanded","scrollWidth","offsetWidth","clone","cloneNode","classList","add","parentElement","appendChild","removeChild","distinctUntilChanged","takeUntil","runOutsideAngular","subscribe","run","markForCheck","Object","defineProperty","prototype","ngAfterContentInit","setTimeout","updateExpansion","ngOnDestroy","complete","next","Directive","args","selector","host","class","[class.navbar-expand]","ViewportRuler","ElementRef","NgZone","ChangeDetectorRef","computedStyle","getComputedStyle","whiteSpace","ngxNavbarAnimations","navbarSlide","trigger","transition","style","opacity","height","overflow","animate","display","NgxNavbarCollapseComponent","_cdr","isCollapsed","isTransitioning","toggle","close","open","Component","template","[class.collapse]","[class.show]","[class.collapsing]","[@slideState]","(@slideState.done)","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","animations","exportAs","NgxNavbarModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { ViewportRuler } from '@angular/cdk/scrolling';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  NgZone,\r\n  OnDestroy,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport { merge, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, map, takeUntil, filter } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[ngxNavbarDynamicExpand]',\r\n  host: {\r\n    class: 'navbar text-nowrap',\r\n    '[class.navbar-expand]': 'isExpanded',\r\n  },\r\n})\r\nexport class NgxNavbarDynamicExpandDirective\r\n  implements AfterContentInit, OnDestroy {\r\n  private _isExpanded = false;\r\n  get isExpanded() {\r\n    return this._isExpanded;\r\n  }\r\n\r\n  private _onDestroy = new Subject<void>();\r\n  private _update = new Subject<void>();\r\n\r\n  private isExpanded$ = merge(\r\n    this._viewportRuler.change(150),\r\n    this._update\r\n  ).pipe(\r\n    filter(() => checkBootstrapStylesAreLoaded(this._elRef.nativeElement)),\r\n    map(() => {\r\n      const element = this._elRef.nativeElement;\r\n      let overflowSize;\r\n      if (this.isExpanded) {\r\n        overflowSize = element.scrollWidth - element.offsetWidth;\r\n      } else {\r\n        const clone = element.cloneNode(true) as HTMLElement;\r\n        clone.classList.add('navbar-expand');\r\n        element.parentElement.appendChild(clone);\r\n        overflowSize = clone.scrollWidth - clone.offsetWidth;\r\n        element.parentElement.removeChild(clone);\r\n      }\r\n      if (!overflowSize) {\r\n        return true;\r\n      }\r\n    }),\r\n    distinctUntilChanged(),\r\n    takeUntil(this._onDestroy)\r\n  );\r\n\r\n  constructor(\r\n    private _viewportRuler: ViewportRuler,\r\n    private _elRef: ElementRef<HTMLElement>,\r\n    private _ngZone: NgZone,\r\n    private _cdRef: ChangeDetectorRef\r\n  ) {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this.isExpanded$.subscribe((isExpanded) => {\r\n        this._ngZone.run(() => {\r\n          this._isExpanded = isExpanded;\r\n          this._cdRef.markForCheck();\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      if (checkBootstrapStylesAreLoaded(this._elRef.nativeElement)) {\r\n        setTimeout(() => {\r\n          this.updateExpansion();\r\n        }, 0);\r\n      } else {\r\n        setTimeout(() => {\r\n          this.ngAfterContentInit();\r\n        }, 1000 / 60);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._update.complete();\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  updateExpansion() {\r\n    this._update.next();\r\n  }\r\n}\r\n\r\nfunction checkBootstrapStylesAreLoaded(element: Element): boolean {\r\n  const computedStyle = getComputedStyle(element);\r\n  return computedStyle && computedStyle.whiteSpace === 'nowrap';\r\n}\r\n","import { animate, AnimationTriggerMetadata, style, transition, trigger } from '@angular/animations';\r\n/** Time and timing curve for navbar animations. */\r\nexport const NAVBAR_ANIMATION_TIMING = '300ms ease-out';\r\n\r\nexport const ngxNavbarAnimations: {\r\n  readonly navbarSlide: AnimationTriggerMetadata;\r\n} = {\r\n  navbarSlide: trigger('slideState', [\r\n    transition('false => true', [\r\n      style({\r\n        opacity: 0,\r\n        height: 0,\r\n        overflow: 'hidden'\r\n      }),\r\n      animate(\r\n        NAVBAR_ANIMATION_TIMING,\r\n        style({\r\n          opacity: 1,\r\n          height: '*'\r\n        })\r\n      )\r\n    ]),\r\n    transition('true => false', [\r\n      animate(\r\n        NAVBAR_ANIMATION_TIMING,\r\n        style({\r\n          display: 'block',\r\n          opacity: 0,\r\n          height: 0,\r\n          overflow: 'hidden'\r\n        })\r\n      )\r\n    ])\r\n  ])\r\n};\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ngxNavbarAnimations } from './navbar-animation';\r\n\r\n@Component({\r\n  selector: 'ngx-navbar-collapse',\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n  styles: [\r\n    `\r\n      .ngx-navbar-collapse.collapsing {\r\n        height: auto;\r\n      }\r\n    `\r\n  ],\r\n  host: {\r\n    class: 'navbar-collapse ngx-navbar-collapse',\r\n    '[class.collapse]': '!isTransitioning',\r\n    '[class.show]': '!isCollapsed && !isTransitioning',\r\n    '[class.collapsing]': 'isTransitioning',\r\n    '[@slideState]': '!isCollapsed',\r\n    '(@slideState.done)': 'isTransitioning = false'\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [ngxNavbarAnimations.navbarSlide],\r\n  exportAs: 'ngxNavbarCollapse'\r\n})\r\nexport class NgxNavbarCollapseComponent {\r\n  public isCollapsed = true;\r\n  public isTransitioning = false;\r\n\r\n  constructor(private _cdr: ChangeDetectorRef) {}\r\n\r\n  toggle() {\r\n    this.isTransitioning = true;\r\n    this.isCollapsed = !this.isCollapsed;\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  close() {\r\n    if (this.isCollapsed) {\r\n      return;\r\n    }\r\n    this.isTransitioning = true;\r\n    this.isCollapsed = true;\r\n    this._cdr.markForCheck();\r\n  }\r\n\r\n  open() {\r\n    if (!this.isCollapsed) {\r\n      return;\r\n    }\r\n    this.isTransitioning = true;\r\n    this.isCollapsed = false;\r\n    this._cdr.markForCheck();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxNavbarCollapseComponent } from './navbar-collapse.component';\r\nimport { NgxNavbarDynamicExpandDirective } from './navbar-dynamic-collapse.directive';\r\n\r\n@NgModule({\r\n  declarations: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective],\r\n  imports: [CommonModule],\r\n  exports: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective]\r\n})\r\nexport class NgxNavbarModule {}\r\n"]}