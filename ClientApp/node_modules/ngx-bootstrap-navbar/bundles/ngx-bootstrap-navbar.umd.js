(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/scrolling'), require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/animations'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-bootstrap-navbar', ['exports', '@angular/cdk/scrolling', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/animations', '@angular/common'], factory) :
    (global = global || self, factory(global['ngx-bootstrap-navbar'] = {}, global.ng.cdk.scrolling, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.animations, global.ng.common));
}(this, (function (exports, scrolling, core, rxjs, operators, animations, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxNavbarDynamicExpandDirective = /** @class */ (function () {
        function NgxNavbarDynamicExpandDirective(_viewportRuler, _elRef, _ngZone, _cdRef) {
            var _this = this;
            this._viewportRuler = _viewportRuler;
            this._elRef = _elRef;
            this._ngZone = _ngZone;
            this._cdRef = _cdRef;
            this._isExpanded = false;
            this._onDestroy = new rxjs.Subject();
            this._update = new rxjs.Subject();
            this.isExpanded$ = rxjs.merge(this._viewportRuler.change(150), this._update).pipe(operators.filter((/**
             * @return {?}
             */
            function () { return checkBootstrapStylesAreLoaded(_this._elRef.nativeElement); })), operators.map((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var element = _this._elRef.nativeElement;
                /** @type {?} */
                var overflowSize;
                if (_this.isExpanded) {
                    overflowSize = element.scrollWidth - element.offsetWidth;
                }
                else {
                    /** @type {?} */
                    var clone = (/** @type {?} */ (element.cloneNode(true)));
                    clone.classList.add('navbar-expand');
                    element.parentElement.appendChild(clone);
                    overflowSize = clone.scrollWidth - clone.offsetWidth;
                    element.parentElement.removeChild(clone);
                }
                if (!overflowSize) {
                    return true;
                }
            })), operators.distinctUntilChanged(), operators.takeUntil(this._onDestroy));
            this._ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.isExpanded$.subscribe((/**
                 * @param {?} isExpanded
                 * @return {?}
                 */
                function (isExpanded) {
                    _this._ngZone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this._isExpanded = isExpanded;
                        _this._cdRef.markForCheck();
                    }));
                }));
            }));
        }
        Object.defineProperty(NgxNavbarDynamicExpandDirective.prototype, "isExpanded", {
            get: /**
             * @return {?}
             */
            function () {
                return this._isExpanded;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgxNavbarDynamicExpandDirective.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this._ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                if (checkBootstrapStylesAreLoaded(_this._elRef.nativeElement)) {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.updateExpansion();
                    }), 0);
                }
                else {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.ngAfterContentInit();
                    }), 1000 / 60);
                }
            }));
        };
        /**
         * @return {?}
         */
        NgxNavbarDynamicExpandDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._update.complete();
            this._onDestroy.next();
            this._onDestroy.complete();
        };
        /**
         * @return {?}
         */
        NgxNavbarDynamicExpandDirective.prototype.updateExpansion = /**
         * @return {?}
         */
        function () {
            this._update.next();
        };
        NgxNavbarDynamicExpandDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngxNavbarDynamicExpand]',
                        host: {
                            class: 'navbar text-nowrap',
                            '[class.navbar-expand]': 'isExpanded',
                        },
                    },] }
        ];
        /** @nocollapse */
        NgxNavbarDynamicExpandDirective.ctorParameters = function () { return [
            { type: scrolling.ViewportRuler },
            { type: core.ElementRef },
            { type: core.NgZone },
            { type: core.ChangeDetectorRef }
        ]; };
        return NgxNavbarDynamicExpandDirective;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NgxNavbarDynamicExpandDirective.prototype._isExpanded;
        /**
         * @type {?}
         * @private
         */
        NgxNavbarDynamicExpandDirective.prototype._onDestroy;
        /**
         * @type {?}
         * @private
         */
        NgxNavbarDynamicExpandDirective.prototype._update;
        /**
         * @type {?}
         * @private
         */
        NgxNavbarDynamicExpandDirective.prototype.isExpanded$;
        /**
         * @type {?}
         * @private
         */
        NgxNavbarDynamicExpandDirective.prototype._viewportRuler;
        /**
         * @type {?}
         * @private
         */
        NgxNavbarDynamicExpandDirective.prototype._elRef;
        /**
         * @type {?}
         * @private
         */
        NgxNavbarDynamicExpandDirective.prototype._ngZone;
        /**
         * @type {?}
         * @private
         */
        NgxNavbarDynamicExpandDirective.prototype._cdRef;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    function checkBootstrapStylesAreLoaded(element) {
        /** @type {?} */
        var computedStyle = getComputedStyle(element);
        return computedStyle && computedStyle.whiteSpace === 'nowrap';
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Time and timing curve for navbar animations.
     * @type {?}
     */
    var NAVBAR_ANIMATION_TIMING = '300ms ease-out';
    /** @type {?} */
    var ngxNavbarAnimations = {
        navbarSlide: animations.trigger('slideState', [
            animations.transition('false => true', [
                animations.style({
                    opacity: 0,
                    height: 0,
                    overflow: 'hidden'
                }),
                animations.animate(NAVBAR_ANIMATION_TIMING, animations.style({
                    opacity: 1,
                    height: '*'
                }))
            ]),
            animations.transition('true => false', [
                animations.animate(NAVBAR_ANIMATION_TIMING, animations.style({
                    display: 'block',
                    opacity: 0,
                    height: 0,
                    overflow: 'hidden'
                }))
            ])
        ])
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxNavbarCollapseComponent = /** @class */ (function () {
        function NgxNavbarCollapseComponent(_cdr) {
            this._cdr = _cdr;
            this.isCollapsed = true;
            this.isTransitioning = false;
        }
        /**
         * @return {?}
         */
        NgxNavbarCollapseComponent.prototype.toggle = /**
         * @return {?}
         */
        function () {
            this.isTransitioning = true;
            this.isCollapsed = !this.isCollapsed;
            this._cdr.markForCheck();
        };
        /**
         * @return {?}
         */
        NgxNavbarCollapseComponent.prototype.close = /**
         * @return {?}
         */
        function () {
            if (this.isCollapsed) {
                return;
            }
            this.isTransitioning = true;
            this.isCollapsed = true;
            this._cdr.markForCheck();
        };
        /**
         * @return {?}
         */
        NgxNavbarCollapseComponent.prototype.open = /**
         * @return {?}
         */
        function () {
            if (!this.isCollapsed) {
                return;
            }
            this.isTransitioning = true;
            this.isCollapsed = false;
            this._cdr.markForCheck();
        };
        NgxNavbarCollapseComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-navbar-collapse',
                        template: "\n    <ng-content></ng-content>\n  ",
                        host: {
                            class: 'navbar-collapse ngx-navbar-collapse',
                            '[class.collapse]': '!isTransitioning',
                            '[class.show]': '!isCollapsed && !isTransitioning',
                            '[class.collapsing]': 'isTransitioning',
                            '[@slideState]': '!isCollapsed',
                            '(@slideState.done)': 'isTransitioning = false'
                        },
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        animations: [ngxNavbarAnimations.navbarSlide],
                        exportAs: 'ngxNavbarCollapse',
                        styles: ["\n      .ngx-navbar-collapse.collapsing {\n        height: auto;\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        NgxNavbarCollapseComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        return NgxNavbarCollapseComponent;
    }());
    if (false) {
        /** @type {?} */
        NgxNavbarCollapseComponent.prototype.isCollapsed;
        /** @type {?} */
        NgxNavbarCollapseComponent.prototype.isTransitioning;
        /**
         * @type {?}
         * @private
         */
        NgxNavbarCollapseComponent.prototype._cdr;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxNavbarModule = /** @class */ (function () {
        function NgxNavbarModule() {
        }
        NgxNavbarModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective],
                        imports: [common.CommonModule],
                        exports: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective]
                    },] }
        ];
        return NgxNavbarModule;
    }());

    exports.NAVBAR_ANIMATION_TIMING = NAVBAR_ANIMATION_TIMING;
    exports.NgxNavbarCollapseComponent = NgxNavbarCollapseComponent;
    exports.NgxNavbarDynamicExpandDirective = NgxNavbarDynamicExpandDirective;
    exports.NgxNavbarModule = NgxNavbarModule;
    exports.ngxNavbarAnimations = ngxNavbarAnimations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-bootstrap-navbar.umd.js.map
