import { ViewportRuler } from '@angular/cdk/scrolling';
import { Directive, ElementRef, NgZone, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { Subject, merge } from 'rxjs';
import { filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { trigger, transition, style, animate } from '@angular/animations';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxNavbarDynamicExpandDirective = /** @class */ (function () {
    function NgxNavbarDynamicExpandDirective(_viewportRuler, _elRef, _ngZone, _cdRef) {
        var _this = this;
        this._viewportRuler = _viewportRuler;
        this._elRef = _elRef;
        this._ngZone = _ngZone;
        this._cdRef = _cdRef;
        this._isExpanded = false;
        this._onDestroy = new Subject();
        this._update = new Subject();
        this.isExpanded$ = merge(this._viewportRuler.change(150), this._update).pipe(filter((/**
         * @return {?}
         */
        function () { return checkBootstrapStylesAreLoaded(_this._elRef.nativeElement); })), map((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var element = _this._elRef.nativeElement;
            /** @type {?} */
            var overflowSize;
            if (_this.isExpanded) {
                overflowSize = element.scrollWidth - element.offsetWidth;
            }
            else {
                /** @type {?} */
                var clone = (/** @type {?} */ (element.cloneNode(true)));
                clone.classList.add('navbar-expand');
                element.parentElement.appendChild(clone);
                overflowSize = clone.scrollWidth - clone.offsetWidth;
                element.parentElement.removeChild(clone);
            }
            if (!overflowSize) {
                return true;
            }
        })), distinctUntilChanged(), takeUntil(this._onDestroy));
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.isExpanded$.subscribe((/**
             * @param {?} isExpanded
             * @return {?}
             */
            function (isExpanded) {
                _this._ngZone.run((/**
                 * @return {?}
                 */
                function () {
                    _this._isExpanded = isExpanded;
                    _this._cdRef.markForCheck();
                }));
            }));
        }));
    }
    Object.defineProperty(NgxNavbarDynamicExpandDirective.prototype, "isExpanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isExpanded;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxNavbarDynamicExpandDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            if (checkBootstrapStylesAreLoaded(_this._elRef.nativeElement)) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.updateExpansion();
                }), 0);
            }
            else {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.ngAfterContentInit();
                }), 1000 / 60);
            }
        }));
    };
    /**
     * @return {?}
     */
    NgxNavbarDynamicExpandDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._update.complete();
        this._onDestroy.next();
        this._onDestroy.complete();
    };
    /**
     * @return {?}
     */
    NgxNavbarDynamicExpandDirective.prototype.updateExpansion = /**
     * @return {?}
     */
    function () {
        this._update.next();
    };
    NgxNavbarDynamicExpandDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxNavbarDynamicExpand]',
                    host: {
                        class: 'navbar text-nowrap',
                        '[class.navbar-expand]': 'isExpanded',
                    },
                },] }
    ];
    /** @nocollapse */
    NgxNavbarDynamicExpandDirective.ctorParameters = function () { return [
        { type: ViewportRuler },
        { type: ElementRef },
        { type: NgZone },
        { type: ChangeDetectorRef }
    ]; };
    return NgxNavbarDynamicExpandDirective;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._isExpanded;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._onDestroy;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._update;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype.isExpanded$;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._viewportRuler;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._elRef;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._cdRef;
}
/**
 * @param {?} element
 * @return {?}
 */
function checkBootstrapStylesAreLoaded(element) {
    /** @type {?} */
    var computedStyle = getComputedStyle(element);
    return computedStyle && computedStyle.whiteSpace === 'nowrap';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Time and timing curve for navbar animations.
 * @type {?}
 */
var NAVBAR_ANIMATION_TIMING = '300ms ease-out';
/** @type {?} */
var ngxNavbarAnimations = {
    navbarSlide: trigger('slideState', [
        transition('false => true', [
            style({
                opacity: 0,
                height: 0,
                overflow: 'hidden'
            }),
            animate(NAVBAR_ANIMATION_TIMING, style({
                opacity: 1,
                height: '*'
            }))
        ]),
        transition('true => false', [
            animate(NAVBAR_ANIMATION_TIMING, style({
                display: 'block',
                opacity: 0,
                height: 0,
                overflow: 'hidden'
            }))
        ])
    ])
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxNavbarCollapseComponent = /** @class */ (function () {
    function NgxNavbarCollapseComponent(_cdr) {
        this._cdr = _cdr;
        this.isCollapsed = true;
        this.isTransitioning = false;
    }
    /**
     * @return {?}
     */
    NgxNavbarCollapseComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.isTransitioning = true;
        this.isCollapsed = !this.isCollapsed;
        this._cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    NgxNavbarCollapseComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        if (this.isCollapsed) {
            return;
        }
        this.isTransitioning = true;
        this.isCollapsed = true;
        this._cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    NgxNavbarCollapseComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        if (!this.isCollapsed) {
            return;
        }
        this.isTransitioning = true;
        this.isCollapsed = false;
        this._cdr.markForCheck();
    };
    NgxNavbarCollapseComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-navbar-collapse',
                    template: "\n    <ng-content></ng-content>\n  ",
                    host: {
                        class: 'navbar-collapse ngx-navbar-collapse',
                        '[class.collapse]': '!isTransitioning',
                        '[class.show]': '!isCollapsed && !isTransitioning',
                        '[class.collapsing]': 'isTransitioning',
                        '[@slideState]': '!isCollapsed',
                        '(@slideState.done)': 'isTransitioning = false'
                    },
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [ngxNavbarAnimations.navbarSlide],
                    exportAs: 'ngxNavbarCollapse',
                    styles: ["\n      .ngx-navbar-collapse.collapsing {\n        height: auto;\n      }\n    "]
                }] }
    ];
    /** @nocollapse */
    NgxNavbarCollapseComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    return NgxNavbarCollapseComponent;
}());
if (false) {
    /** @type {?} */
    NgxNavbarCollapseComponent.prototype.isCollapsed;
    /** @type {?} */
    NgxNavbarCollapseComponent.prototype.isTransitioning;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarCollapseComponent.prototype._cdr;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxNavbarModule = /** @class */ (function () {
    function NgxNavbarModule() {
    }
    NgxNavbarModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective],
                    imports: [CommonModule],
                    exports: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective]
                },] }
    ];
    return NgxNavbarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NAVBAR_ANIMATION_TIMING, NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective, NgxNavbarModule, ngxNavbarAnimations };
//# sourceMappingURL=ngx-bootstrap-navbar.js.map
