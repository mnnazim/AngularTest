/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ViewportRuler } from '@angular/cdk/scrolling';
import { Directive, ElementRef, NgZone, ChangeDetectorRef, } from '@angular/core';
import { merge, Subject } from 'rxjs';
import { distinctUntilChanged, map, takeUntil, filter } from 'rxjs/operators';
var NgxNavbarDynamicExpandDirective = /** @class */ (function () {
    function NgxNavbarDynamicExpandDirective(_viewportRuler, _elRef, _ngZone, _cdRef) {
        var _this = this;
        this._viewportRuler = _viewportRuler;
        this._elRef = _elRef;
        this._ngZone = _ngZone;
        this._cdRef = _cdRef;
        this._isExpanded = false;
        this._onDestroy = new Subject();
        this._update = new Subject();
        this.isExpanded$ = merge(this._viewportRuler.change(150), this._update).pipe(filter((/**
         * @return {?}
         */
        function () { return checkBootstrapStylesAreLoaded(_this._elRef.nativeElement); })), map((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var element = _this._elRef.nativeElement;
            /** @type {?} */
            var overflowSize;
            if (_this.isExpanded) {
                overflowSize = element.scrollWidth - element.offsetWidth;
            }
            else {
                /** @type {?} */
                var clone = (/** @type {?} */ (element.cloneNode(true)));
                clone.classList.add('navbar-expand');
                element.parentElement.appendChild(clone);
                overflowSize = clone.scrollWidth - clone.offsetWidth;
                element.parentElement.removeChild(clone);
            }
            if (!overflowSize) {
                return true;
            }
        })), distinctUntilChanged(), takeUntil(this._onDestroy));
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.isExpanded$.subscribe((/**
             * @param {?} isExpanded
             * @return {?}
             */
            function (isExpanded) {
                _this._ngZone.run((/**
                 * @return {?}
                 */
                function () {
                    _this._isExpanded = isExpanded;
                    _this._cdRef.markForCheck();
                }));
            }));
        }));
    }
    Object.defineProperty(NgxNavbarDynamicExpandDirective.prototype, "isExpanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isExpanded;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxNavbarDynamicExpandDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            if (checkBootstrapStylesAreLoaded(_this._elRef.nativeElement)) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.updateExpansion();
                }), 0);
            }
            else {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.ngAfterContentInit();
                }), 1000 / 60);
            }
        }));
    };
    /**
     * @return {?}
     */
    NgxNavbarDynamicExpandDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._update.complete();
        this._onDestroy.next();
        this._onDestroy.complete();
    };
    /**
     * @return {?}
     */
    NgxNavbarDynamicExpandDirective.prototype.updateExpansion = /**
     * @return {?}
     */
    function () {
        this._update.next();
    };
    NgxNavbarDynamicExpandDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxNavbarDynamicExpand]',
                    host: {
                        class: 'navbar text-nowrap',
                        '[class.navbar-expand]': 'isExpanded',
                    },
                },] }
    ];
    /** @nocollapse */
    NgxNavbarDynamicExpandDirective.ctorParameters = function () { return [
        { type: ViewportRuler },
        { type: ElementRef },
        { type: NgZone },
        { type: ChangeDetectorRef }
    ]; };
    return NgxNavbarDynamicExpandDirective;
}());
export { NgxNavbarDynamicExpandDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._isExpanded;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._onDestroy;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._update;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype.isExpanded$;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._viewportRuler;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._elRef;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._cdRef;
}
/**
 * @param {?} element
 * @return {?}
 */
function checkBootstrapStylesAreLoaded(element) {
    /** @type {?} */
    var computedStyle = getComputedStyle(element);
    return computedStyle && computedStyle.whiteSpace === 'nowrap';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLWR5bmFtaWMtY29sbGFwc2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWJvb3RzdHJhcC1uYXZiYXIvIiwic291cmNlcyI6WyJsaWIvbmF2YmFyLWR5bmFtaWMtY29sbGFwc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdkQsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUVOLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5RTtJQTBDRSx5Q0FDVSxjQUE2QixFQUM3QixNQUErQixFQUMvQixPQUFlLEVBQ2YsTUFBeUI7UUFKbkMsaUJBY0M7UUFiUyxtQkFBYyxHQUFkLGNBQWMsQ0FBZTtRQUM3QixXQUFNLEdBQU4sTUFBTSxDQUF5QjtRQUMvQixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ2YsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFyQzNCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBS3BCLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBQ2pDLFlBQU8sR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBRTlCLGdCQUFXLEdBQUcsS0FBSyxDQUN6QixJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FDYixDQUFDLElBQUksQ0FDSixNQUFNOzs7UUFBQyxjQUFNLE9BQUEsNkJBQTZCLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBeEQsQ0FBd0QsRUFBQyxFQUN0RSxHQUFH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Qzs7Ozs7SUFDckMsaURBQXVDOzs7OztJQUN2QyxrREFBdUI7Ozs7O0lBQ3ZCLGlEQUFpQzs7Ozs7O0FBcUNyQyxTQUFTLDZCQUE2QixDQUFDLE9BQWdCOztRQUMvQyxhQUFhLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO0lBQy9DLE9BQU8sYUFBYSxJQUFJLGFBQWEsQ0FBQyxVQUFVLEtBQUssUUFBUSxDQUFDO0FBQ2hFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3cG9ydFJ1bGVyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Njcm9sbGluZyc7XHJcbmltcG9ydCB7XHJcbiAgQWZ0ZXJDb250ZW50SW5pdCxcclxuICBEaXJlY3RpdmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBOZ1pvbmUsXHJcbiAgT25EZXN0cm95LFxyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBtZXJnZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCB0YWtlVW50aWwsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW25neE5hdmJhckR5bmFtaWNFeHBhbmRdJyxcclxuICBob3N0OiB7XHJcbiAgICBjbGFzczogJ25hdmJhciB0ZXh0LW5vd3JhcCcsXHJcbiAgICAnW2NsYXNzLm5hdmJhci1leHBhbmRdJzogJ2lzRXhwYW5kZWQnLFxyXG4gIH0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hOYXZiYXJEeW5hbWljRXhwYW5kRGlyZWN0aXZlXHJcbiAgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xyXG4gIHByaXZhdGUgX2lzRXhwYW5kZWQgPSBmYWxzZTtcclxuICBnZXQgaXNFeHBhbmRlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pc0V4cGFuZGVkO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfb25EZXN0cm95ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcclxuICBwcml2YXRlIF91cGRhdGUgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xyXG5cclxuICBwcml2YXRlIGlzRXhwYW5kZWQkID0gbWVyZ2UoXHJcbiAgICB0aGlzLl92aWV3cG9ydFJ1bGVyLmNoYW5nZSgxNTApLFxyXG4gICAgdGhpcy5fdXBkYXRlXHJcbiAgKS5waXBlKFxyXG4gICAgZmlsdGVyKCgpID0+IGNoZWNrQm9vdHN0cmFwU3R5bGVzQXJlTG9hZGVkKHRoaXMuX2VsUmVmLm5hdGl2ZUVsZW1lbnQpKSxcclxuICAgIG1hcCgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9lbFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgICBsZXQgb3ZlcmZsb3dTaXplO1xyXG4gICAgICBpZiAodGhpcy5pc0V4cGFuZGVkKSB7XHJcbiAgICAgICAgb3ZlcmZsb3dTaXplID0gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgY2xvbmUgPSBlbGVtZW50LmNsb25lTm9kZSh0cnVlKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBjbG9uZS5jbGFzc0xpc3QuYWRkKCduYXZiYXItZXhwYW5kJyk7XHJcbiAgICAgICAgZWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNsb25lKTtcclxuICAgICAgICBvdmVyZmxvd1NpemUgPSBjbG9uZS5zY3JvbGxXaWR0aCAtIGNsb25lLm9mZnNldFdpZHRoO1xyXG4gICAgICAgIGVsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChjbG9uZSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFvdmVyZmxvd1NpemUpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSksXHJcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxyXG4gICAgdGFrZVVudGlsKHRoaXMuX29uRGVzdHJveSlcclxuICApO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgX3ZpZXdwb3J0UnVsZXI6IFZpZXdwb3J0UnVsZXIsXHJcbiAgICBwcml2YXRlIF9lbFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXHJcbiAgICBwcml2YXRlIF9uZ1pvbmU6IE5nWm9uZSxcclxuICAgIHByaXZhdGUgX2NkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZlxyXG4gICkge1xyXG4gICAgdGhpcy5fbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgdGhpcy5pc0V4cGFuZGVkJC5zdWJzY3JpYmUoKGlzRXhwYW5kZWQpID0+IHtcclxuICAgICAgICB0aGlzLl9uZ1pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuX2lzRXhwYW5kZWQgPSBpc0V4cGFuZGVkO1xyXG4gICAgICAgICAgdGhpcy5fY2RSZWYubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XHJcbiAgICB0aGlzLl9uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICBpZiAoY2hlY2tCb290c3RyYXBTdHlsZXNBcmVMb2FkZWQodGhpcy5fZWxSZWYubmF0aXZlRWxlbWVudCkpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIHRoaXMudXBkYXRlRXhwYW5zaW9uKCk7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLm5nQWZ0ZXJDb250ZW50SW5pdCgpO1xyXG4gICAgICAgIH0sIDEwMDAgLyA2MCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLl91cGRhdGUuY29tcGxldGUoKTtcclxuICAgIHRoaXMuX29uRGVzdHJveS5uZXh0KCk7XHJcbiAgICB0aGlzLl9vbkRlc3Ryb3kuY29tcGxldGUoKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUV4cGFuc2lvbigpIHtcclxuICAgIHRoaXMuX3VwZGF0ZS5uZXh0KCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0Jvb3RzdHJhcFN0eWxlc0FyZUxvYWRlZChlbGVtZW50OiBFbGVtZW50KTogYm9vbGVhbiB7XHJcbiAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XHJcbiAgcmV0dXJuIGNvbXB1dGVkU3R5bGUgJiYgY29tcHV0ZWRTdHlsZS53aGl0ZVNwYWNlID09PSAnbm93cmFwJztcclxufVxyXG4iXX0=