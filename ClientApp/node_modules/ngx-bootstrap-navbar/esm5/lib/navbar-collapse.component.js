/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation } from '@angular/core';
import { ngxNavbarAnimations } from './navbar-animation';
var NgxNavbarCollapseComponent = /** @class */ (function () {
    function NgxNavbarCollapseComponent(_cdr) {
        this._cdr = _cdr;
        this.isCollapsed = true;
        this.isTransitioning = false;
    }
    /**
     * @return {?}
     */
    NgxNavbarCollapseComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.isTransitioning = true;
        this.isCollapsed = !this.isCollapsed;
        this._cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    NgxNavbarCollapseComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        if (this.isCollapsed) {
            return;
        }
        this.isTransitioning = true;
        this.isCollapsed = true;
        this._cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    NgxNavbarCollapseComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        if (!this.isCollapsed) {
            return;
        }
        this.isTransitioning = true;
        this.isCollapsed = false;
        this._cdr.markForCheck();
    };
    NgxNavbarCollapseComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-navbar-collapse',
                    template: "\n    <ng-content></ng-content>\n  ",
                    host: {
                        class: 'navbar-collapse ngx-navbar-collapse',
                        '[class.collapse]': '!isTransitioning',
                        '[class.show]': '!isCollapsed && !isTransitioning',
                        '[class.collapsing]': 'isTransitioning',
                        '[@slideState]': '!isCollapsed',
                        '(@slideState.done)': 'isTransitioning = false'
                    },
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [ngxNavbarAnimations.navbarSlide],
                    exportAs: 'ngxNavbarCollapse',
                    styles: ["\n      .ngx-navbar-collapse.collapsing {\n        height: auto;\n      }\n    "]
                }] }
    ];
    /** @nocollapse */
    NgxNavbarCollapseComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    return NgxNavbarCollapseComponent;
}());
export { NgxNavbarCollapseComponent };
if (false) {
    /** @type {?} */
    NgxNavbarCollapseComponent.prototype.isCollapsed;
    /** @type {?} */
    NgxNavbarCollapseComponent.prototype.isTransitioning;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarCollapseComponent.prototype._cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLWNvbGxhcHNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1ib290c3RyYXAtbmF2YmFyLyIsInNvdXJjZXMiOlsibGliL25hdmJhci1jb2xsYXBzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFekQ7SUE2QkUsb0NBQW9CLElBQXVCO1FBQXZCLFNBQUksR0FBSixJQUFJLENBQW1CO1FBSHBDLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ25CLG9CQUFlLEdBQUcsS0FBSyxDQUFDO0lBRWUsQ0FBQzs7OztJQUUvQywyQ0FBTTs7O0lBQU47UUFDRSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFRCwwQ0FBSzs7O0lBQUw7UUFDRSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7O0lBRUQseUNBQUk7OztJQUFKO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckIsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMzQixDQUFDOztnQkFyREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFFBQVEsRUFBRSxxQ0FFVDtvQkFRRCxJQUFJLEVBQUU7d0JBQ0osS0FBSyxFQUFFLHFDQUFxQzt3QkFDNUMsa0JBQWtCLEVBQUUsa0JBQWtCO3dCQUN0QyxjQUFjLEVBQUUsa0NBQWtDO3dCQUNsRCxvQkFBb0IsRUFBRSxpQkFBaUI7d0JBQ3ZDLGVBQWUsRUFBRSxjQUFjO3dCQUMvQixvQkFBb0IsRUFBRSx5QkFBeUI7cUJBQ2hEO29CQUNELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsVUFBVSxFQUFFLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDO29CQUM3QyxRQUFRLEVBQUUsbUJBQW1COzZCQWpCM0IsaUZBSUM7aUJBY0o7Ozs7Z0JBOUJDLGlCQUFpQjs7SUE0RG5CLGlDQUFDO0NBQUEsQUF0REQsSUFzREM7U0E3QlksMEJBQTBCOzs7SUFDckMsaURBQTBCOztJQUMxQixxREFBK0I7Ozs7O0lBRW5CLDBDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgQ29tcG9uZW50LFxyXG4gIFZpZXdFbmNhcHN1bGF0aW9uXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IG5neE5hdmJhckFuaW1hdGlvbnMgfSBmcm9tICcuL25hdmJhci1hbmltYXRpb24nO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtbmF2YmFyLWNvbGxhcHNlJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gIGAsXHJcbiAgc3R5bGVzOiBbXHJcbiAgICBgXHJcbiAgICAgIC5uZ3gtbmF2YmFyLWNvbGxhcHNlLmNvbGxhcHNpbmcge1xyXG4gICAgICAgIGhlaWdodDogYXV0bztcclxuICAgICAgfVxyXG4gICAgYFxyXG4gIF0sXHJcbiAgaG9zdDoge1xyXG4gICAgY2xhc3M6ICduYXZiYXItY29sbGFwc2Ugbmd4LW5hdmJhci1jb2xsYXBzZScsXHJcbiAgICAnW2NsYXNzLmNvbGxhcHNlXSc6ICchaXNUcmFuc2l0aW9uaW5nJyxcclxuICAgICdbY2xhc3Muc2hvd10nOiAnIWlzQ29sbGFwc2VkICYmICFpc1RyYW5zaXRpb25pbmcnLFxyXG4gICAgJ1tjbGFzcy5jb2xsYXBzaW5nXSc6ICdpc1RyYW5zaXRpb25pbmcnLFxyXG4gICAgJ1tAc2xpZGVTdGF0ZV0nOiAnIWlzQ29sbGFwc2VkJyxcclxuICAgICcoQHNsaWRlU3RhdGUuZG9uZSknOiAnaXNUcmFuc2l0aW9uaW5nID0gZmFsc2UnXHJcbiAgfSxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIGFuaW1hdGlvbnM6IFtuZ3hOYXZiYXJBbmltYXRpb25zLm5hdmJhclNsaWRlXSxcclxuICBleHBvcnRBczogJ25neE5hdmJhckNvbGxhcHNlJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4TmF2YmFyQ29sbGFwc2VDb21wb25lbnQge1xyXG4gIHB1YmxpYyBpc0NvbGxhcHNlZCA9IHRydWU7XHJcbiAgcHVibGljIGlzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jZHI6IENoYW5nZURldGVjdG9yUmVmKSB7fVxyXG5cclxuICB0b2dnbGUoKSB7XHJcbiAgICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IHRydWU7XHJcbiAgICB0aGlzLmlzQ29sbGFwc2VkID0gIXRoaXMuaXNDb2xsYXBzZWQ7XHJcbiAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIGlmICh0aGlzLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcclxuICAgIHRoaXMuaXNDb2xsYXBzZWQgPSB0cnVlO1xyXG4gICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIGlmICghdGhpcy5pc0NvbGxhcHNlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IHRydWU7XHJcbiAgICB0aGlzLmlzQ29sbGFwc2VkID0gZmFsc2U7XHJcbiAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==