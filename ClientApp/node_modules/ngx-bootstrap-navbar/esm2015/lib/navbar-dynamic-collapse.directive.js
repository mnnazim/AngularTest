/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ViewportRuler } from '@angular/cdk/scrolling';
import { Directive, ElementRef, NgZone, ChangeDetectorRef, } from '@angular/core';
import { merge, Subject } from 'rxjs';
import { distinctUntilChanged, map, takeUntil, filter } from 'rxjs/operators';
export class NgxNavbarDynamicExpandDirective {
    /**
     * @param {?} _viewportRuler
     * @param {?} _elRef
     * @param {?} _ngZone
     * @param {?} _cdRef
     */
    constructor(_viewportRuler, _elRef, _ngZone, _cdRef) {
        this._viewportRuler = _viewportRuler;
        this._elRef = _elRef;
        this._ngZone = _ngZone;
        this._cdRef = _cdRef;
        this._isExpanded = false;
        this._onDestroy = new Subject();
        this._update = new Subject();
        this.isExpanded$ = merge(this._viewportRuler.change(150), this._update).pipe(filter((/**
         * @return {?}
         */
        () => checkBootstrapStylesAreLoaded(this._elRef.nativeElement))), map((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const element = this._elRef.nativeElement;
            /** @type {?} */
            let overflowSize;
            if (this.isExpanded) {
                overflowSize = element.scrollWidth - element.offsetWidth;
            }
            else {
                /** @type {?} */
                const clone = (/** @type {?} */ (element.cloneNode(true)));
                clone.classList.add('navbar-expand');
                element.parentElement.appendChild(clone);
                overflowSize = clone.scrollWidth - clone.offsetWidth;
                element.parentElement.removeChild(clone);
            }
            if (!overflowSize) {
                return true;
            }
        })), distinctUntilChanged(), takeUntil(this._onDestroy));
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.isExpanded$.subscribe((/**
             * @param {?} isExpanded
             * @return {?}
             */
            (isExpanded) => {
                this._ngZone.run((/**
                 * @return {?}
                 */
                () => {
                    this._isExpanded = isExpanded;
                    this._cdRef.markForCheck();
                }));
            }));
        }));
    }
    /**
     * @return {?}
     */
    get isExpanded() {
        return this._isExpanded;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            if (checkBootstrapStylesAreLoaded(this._elRef.nativeElement)) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.updateExpansion();
                }), 0);
            }
            else {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.ngAfterContentInit();
                }), 1000 / 60);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._update.complete();
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    /**
     * @return {?}
     */
    updateExpansion() {
        this._update.next();
    }
}
NgxNavbarDynamicExpandDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxNavbarDynamicExpand]',
                host: {
                    class: 'navbar text-nowrap',
                    '[class.navbar-expand]': 'isExpanded',
                },
            },] }
];
/** @nocollapse */
NgxNavbarDynamicExpandDirective.ctorParameters = () => [
    { type: ViewportRuler },
    { type: ElementRef },
    { type: NgZone },
    { type: ChangeDetectorRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._isExpanded;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._onDestroy;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._update;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype.isExpanded$;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._viewportRuler;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._elRef;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarDynamicExpandDirective.prototype._cdRef;
}
/**
 * @param {?} element
 * @return {?}
 */
function checkBootstrapStylesAreLoaded(element) {
    /** @type {?} */
    const computedStyle = getComputedStyle(element);
    return computedStyle && computedStyle.whiteSpace === 'nowrap';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLWR5bmFtaWMtY29sbGFwc2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWJvb3RzdHJhcC1uYXZiYXIvIiwic291cmNlcyI6WyJsaWIvbmF2YmFyLWR5bmFtaWMtY29sbGFwc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdkQsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUVOLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVM5RSxNQUFNLE9BQU8sK0JBQStCOzs7Ozs7O0lBbUMxQyxZQUNVLGNBQTZCLEVBQzdCLE1BQStCLEVBQy9CLE9BQWUsRUFDZixNQUF5QjtRQUh6QixtQkFBYyxHQUFkLGNBQWMsQ0FBZTtRQUM3QixXQUFNLEdBQU4sTUFBTSxDQUF5QjtRQUMvQixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ2YsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFyQzNCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBS3BCLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBQ2pDLFlBQU8sR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBRTlCLGdCQUFXLEdBQUcsS0FBSyxDQUN6QixJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FDYixDQUFDLElBQUksQ0FDSixNQUFNOzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFDLEVBQ3RF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Ozs7SUFDdkMsa0RBQXVCOzs7OztJQUN2QixpREFBaUM7Ozs7OztBQXFDckMsU0FBUyw2QkFBNkIsQ0FBQyxPQUFnQjs7VUFDL0MsYUFBYSxHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQztJQUMvQyxPQUFPLGFBQWEsSUFBSSxhQUFhLENBQUMsVUFBVSxLQUFLLFFBQVEsQ0FBQztBQUNoRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld3BvcnRSdWxlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zY3JvbGxpbmcnO1xyXG5pbXBvcnQge1xyXG4gIEFmdGVyQ29udGVudEluaXQsXHJcbiAgRGlyZWN0aXZlLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgTmdab25lLFxyXG4gIE9uRGVzdHJveSxcclxuICBDaGFuZ2VEZXRlY3RvclJlZixcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgbWVyZ2UsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgdGFrZVVudGlsLCBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tuZ3hOYXZiYXJEeW5hbWljRXhwYW5kXScsXHJcbiAgaG9zdDoge1xyXG4gICAgY2xhc3M6ICduYXZiYXIgdGV4dC1ub3dyYXAnLFxyXG4gICAgJ1tjbGFzcy5uYXZiYXItZXhwYW5kXSc6ICdpc0V4cGFuZGVkJyxcclxuICB9LFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4TmF2YmFyRHluYW1pY0V4cGFuZERpcmVjdGl2ZVxyXG4gIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcclxuICBwcml2YXRlIF9pc0V4cGFuZGVkID0gZmFsc2U7XHJcbiAgZ2V0IGlzRXhwYW5kZWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faXNFeHBhbmRlZDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX29uRGVzdHJveSA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcbiAgcHJpdmF0ZSBfdXBkYXRlID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcclxuXHJcbiAgcHJpdmF0ZSBpc0V4cGFuZGVkJCA9IG1lcmdlKFxyXG4gICAgdGhpcy5fdmlld3BvcnRSdWxlci5jaGFuZ2UoMTUwKSxcclxuICAgIHRoaXMuX3VwZGF0ZVxyXG4gICkucGlwZShcclxuICAgIGZpbHRlcigoKSA9PiBjaGVja0Jvb3RzdHJhcFN0eWxlc0FyZUxvYWRlZCh0aGlzLl9lbFJlZi5uYXRpdmVFbGVtZW50KSksXHJcbiAgICBtYXAoKCkgPT4ge1xyXG4gICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fZWxSZWYubmF0aXZlRWxlbWVudDtcclxuICAgICAgbGV0IG92ZXJmbG93U2l6ZTtcclxuICAgICAgaWYgKHRoaXMuaXNFeHBhbmRlZCkge1xyXG4gICAgICAgIG92ZXJmbG93U2l6ZSA9IGVsZW1lbnQuc2Nyb2xsV2lkdGggLSBlbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGNsb25lID0gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgY2xvbmUuY2xhc3NMaXN0LmFkZCgnbmF2YmFyLWV4cGFuZCcpO1xyXG4gICAgICAgIGVsZW1lbnQucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChjbG9uZSk7XHJcbiAgICAgICAgb3ZlcmZsb3dTaXplID0gY2xvbmUuc2Nyb2xsV2lkdGggLSBjbG9uZS5vZmZzZXRXaWR0aDtcclxuICAgICAgICBlbGVtZW50LnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoY2xvbmUpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghb3ZlcmZsb3dTaXplKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pLFxyXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcclxuICAgIHRha2VVbnRpbCh0aGlzLl9vbkRlc3Ryb3kpXHJcbiAgKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIF92aWV3cG9ydFJ1bGVyOiBWaWV3cG9ydFJ1bGVyLFxyXG4gICAgcHJpdmF0ZSBfZWxSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxyXG4gICAgcHJpdmF0ZSBfbmdab25lOiBOZ1pvbmUsXHJcbiAgICBwcml2YXRlIF9jZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWZcclxuICApIHtcclxuICAgIHRoaXMuX25nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgIHRoaXMuaXNFeHBhbmRlZCQuc3Vic2NyaWJlKChpc0V4cGFuZGVkKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fbmdab25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLl9pc0V4cGFuZGVkID0gaXNFeHBhbmRlZDtcclxuICAgICAgICAgIHRoaXMuX2NkUmVmLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgdGhpcy5fbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgaWYgKGNoZWNrQm9vdHN0cmFwU3R5bGVzQXJlTG9hZGVkKHRoaXMuX2VsUmVmLm5hdGl2ZUVsZW1lbnQpKSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZUV4cGFuc2lvbigpO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5uZ0FmdGVyQ29udGVudEluaXQoKTtcclxuICAgICAgICB9LCAxMDAwIC8gNjApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5fdXBkYXRlLmNvbXBsZXRlKCk7XHJcbiAgICB0aGlzLl9vbkRlc3Ryb3kubmV4dCgpO1xyXG4gICAgdGhpcy5fb25EZXN0cm95LmNvbXBsZXRlKCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVFeHBhbnNpb24oKSB7XHJcbiAgICB0aGlzLl91cGRhdGUubmV4dCgpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tCb290c3RyYXBTdHlsZXNBcmVMb2FkZWQoZWxlbWVudDogRWxlbWVudCk6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xyXG4gIHJldHVybiBjb21wdXRlZFN0eWxlICYmIGNvbXB1dGVkU3R5bGUud2hpdGVTcGFjZSA9PT0gJ25vd3JhcCc7XHJcbn1cclxuIl19