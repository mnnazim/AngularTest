/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation } from '@angular/core';
import { ngxNavbarAnimations } from './navbar-animation';
export class NgxNavbarCollapseComponent {
    /**
     * @param {?} _cdr
     */
    constructor(_cdr) {
        this._cdr = _cdr;
        this.isCollapsed = true;
        this.isTransitioning = false;
    }
    /**
     * @return {?}
     */
    toggle() {
        this.isTransitioning = true;
        this.isCollapsed = !this.isCollapsed;
        this._cdr.markForCheck();
    }
    /**
     * @return {?}
     */
    close() {
        if (this.isCollapsed) {
            return;
        }
        this.isTransitioning = true;
        this.isCollapsed = true;
        this._cdr.markForCheck();
    }
    /**
     * @return {?}
     */
    open() {
        if (!this.isCollapsed) {
            return;
        }
        this.isTransitioning = true;
        this.isCollapsed = false;
        this._cdr.markForCheck();
    }
}
NgxNavbarCollapseComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-navbar-collapse',
                template: `
    <ng-content></ng-content>
  `,
                host: {
                    class: 'navbar-collapse ngx-navbar-collapse',
                    '[class.collapse]': '!isTransitioning',
                    '[class.show]': '!isCollapsed && !isTransitioning',
                    '[class.collapsing]': 'isTransitioning',
                    '[@slideState]': '!isCollapsed',
                    '(@slideState.done)': 'isTransitioning = false'
                },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [ngxNavbarAnimations.navbarSlide],
                exportAs: 'ngxNavbarCollapse',
                styles: [`
      .ngx-navbar-collapse.collapsing {
        height: auto;
      }
    `]
            }] }
];
/** @nocollapse */
NgxNavbarCollapseComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
if (false) {
    /** @type {?} */
    NgxNavbarCollapseComponent.prototype.isCollapsed;
    /** @type {?} */
    NgxNavbarCollapseComponent.prototype.isTransitioning;
    /**
     * @type {?}
     * @private
     */
    NgxNavbarCollapseComponent.prototype._cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLWNvbGxhcHNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1ib290c3RyYXAtbmF2YmFyLyIsInNvdXJjZXMiOlsibGliL25hdmJhci1jb2xsYXBzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUEyQnpELE1BQU0sT0FBTywwQkFBMEI7Ozs7SUFJckMsWUFBb0IsSUFBdUI7UUFBdkIsU0FBSSxHQUFKLElBQUksQ0FBbUI7UUFIcEMsZ0JBQVcsR0FBRyxJQUFJLENBQUM7UUFDbkIsb0JBQWUsR0FBRyxLQUFLLENBQUM7SUFFZSxDQUFDOzs7O0lBRS9DLE1BQU07UUFDSixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0gsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7OztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNCLENBQUM7OztZQXJERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsUUFBUSxFQUFFOztHQUVUO2dCQVFELElBQUksRUFBRTtvQkFDSixLQUFLLEVBQUUscUNBQXFDO29CQUM1QyxrQkFBa0IsRUFBRSxrQkFBa0I7b0JBQ3RDLGNBQWMsRUFBRSxrQ0FBa0M7b0JBQ2xELG9CQUFvQixFQUFFLGlCQUFpQjtvQkFDdkMsZUFBZSxFQUFFLGNBQWM7b0JBQy9CLG9CQUFvQixFQUFFLHlCQUF5QjtpQkFDaEQ7Z0JBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxVQUFVLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUM7Z0JBQzdDLFFBQVEsRUFBRSxtQkFBbUI7eUJBakIzQjs7OztLQUlDO2FBY0o7Ozs7WUE5QkMsaUJBQWlCOzs7O0lBZ0NqQixpREFBMEI7O0lBQzFCLHFEQUErQjs7Ozs7SUFFbkIsMENBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICBDb21wb25lbnQsXHJcbiAgVmlld0VuY2Fwc3VsYXRpb25cclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgbmd4TmF2YmFyQW5pbWF0aW9ucyB9IGZyb20gJy4vbmF2YmFyLWFuaW1hdGlvbic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1uYXZiYXItY29sbGFwc2UnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgYCxcclxuICBzdHlsZXM6IFtcclxuICAgIGBcclxuICAgICAgLm5neC1uYXZiYXItY29sbGFwc2UuY29sbGFwc2luZyB7XHJcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgICB9XHJcbiAgICBgXHJcbiAgXSxcclxuICBob3N0OiB7XHJcbiAgICBjbGFzczogJ25hdmJhci1jb2xsYXBzZSBuZ3gtbmF2YmFyLWNvbGxhcHNlJyxcclxuICAgICdbY2xhc3MuY29sbGFwc2VdJzogJyFpc1RyYW5zaXRpb25pbmcnLFxyXG4gICAgJ1tjbGFzcy5zaG93XSc6ICchaXNDb2xsYXBzZWQgJiYgIWlzVHJhbnNpdGlvbmluZycsXHJcbiAgICAnW2NsYXNzLmNvbGxhcHNpbmddJzogJ2lzVHJhbnNpdGlvbmluZycsXHJcbiAgICAnW0BzbGlkZVN0YXRlXSc6ICchaXNDb2xsYXBzZWQnLFxyXG4gICAgJyhAc2xpZGVTdGF0ZS5kb25lKSc6ICdpc1RyYW5zaXRpb25pbmcgPSBmYWxzZSdcclxuICB9LFxyXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgYW5pbWF0aW9uczogW25neE5hdmJhckFuaW1hdGlvbnMubmF2YmFyU2xpZGVdLFxyXG4gIGV4cG9ydEFzOiAnbmd4TmF2YmFyQ29sbGFwc2UnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hOYXZiYXJDb2xsYXBzZUNvbXBvbmVudCB7XHJcbiAgcHVibGljIGlzQ29sbGFwc2VkID0gdHJ1ZTtcclxuICBwdWJsaWMgaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XHJcblxyXG4gIHRvZ2dsZSgpIHtcclxuICAgIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcclxuICAgIHRoaXMuaXNDb2xsYXBzZWQgPSAhdGhpcy5pc0NvbGxhcHNlZDtcclxuICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgaWYgKHRoaXMuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5pc0NvbGxhcHNlZCA9IHRydWU7XHJcbiAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgfVxyXG5cclxuICBvcGVuKCkge1xyXG4gICAgaWYgKCF0aGlzLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcclxuICAgIHRoaXMuaXNDb2xsYXBzZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcclxuICB9XHJcbn1cclxuIl19