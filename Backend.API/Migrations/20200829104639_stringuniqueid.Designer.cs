// <auto-generated />
using System;
using Backend.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Backend.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200829104639_stringuniqueid")]
    partial class stringuniqueid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Backend.API.Models.ActivityLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("TemplateGroupId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TemplateGroupId");

                    b.ToTable("ActivityLink");
                });

            modelBuilder.Entity("Backend.API.Models.Device", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UniqueId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Backend.API.Models.Template", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("TemplateGroupid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TemplateGroupid");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Backend.API.Models.TemplateGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TemplateGroups");
                });

            modelBuilder.Entity("Backend.API.Models.ActivityLink", b =>
                {
                    b.HasOne("Backend.API.Models.TemplateGroup", "TemplateGroup")
                        .WithMany("ActivityLinks")
                        .HasForeignKey("TemplateGroupId");
                });

            modelBuilder.Entity("Backend.API.Models.Template", b =>
                {
                    b.HasOne("Backend.API.Models.TemplateGroup", "TemplateGroup")
                        .WithMany("Templates")
                        .HasForeignKey("TemplateGroupid")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
